// <auto-generated />
using System;
using ThanhTuan.Blogs.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ThanhTuan.Blogs.Migrations
{
  [DbContext(typeof(AppDbContext))]
  [Migration("20201213054604_wf")]
  partial class wf
  {
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
          .HasAnnotation("ProductVersion", "3.1.6")
          .HasAnnotation("Relational:MaxIdentifierLength", 63);

      modelBuilder.Entity("DmcSocial.Models.Post", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<bool>("CanComment")
                      .HasColumnType("boolean");

            b.Property<int>("CommentCount")
                      .HasColumnType("integer");

            b.Property<string>("Content")
                      .HasColumnType("text");

            b.Property<string>("CoverImageURL")
                      .HasColumnType("text");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("DateCreated")
                      .HasColumnType("timestamp with time zone");

            b.Property<DateTimeOffset?>("DateRemoved")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("LastModifiedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("LastModifiedTime")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("LookupValue")
                      .HasColumnType("text");

            b.Property<string[]>("PostAccessUsers")
                      .HasColumnType("text[]");

            b.Property<int>("PostRestrictionType")
                      .HasColumnType("integer");

            b.Property<string>("RemovedBy")
                      .HasColumnType("text");

            b.Property<string>("Subtitle")
                      .HasColumnType("text");

            b.Property<string>("Title")
                      .HasColumnType("text");

            b.Property<int>("ViewCount")
                      .HasColumnType("integer");

            b.HasKey("Id");

            b.HasIndex("DateRemoved");

            b.HasIndex("LastModifiedTime");

            b.HasIndex("LookupValue");

            b.ToTable("Posts");
          });

      modelBuilder.Entity("DmcSocial.Models.PostComment", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("integer")
                      .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            b.Property<int>("CommentCount")
                      .HasColumnType("integer");

            b.Property<string>("Content")
                      .HasColumnType("text");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("DateCreated")
                      .HasColumnType("timestamp with time zone");

            b.Property<DateTimeOffset?>("DateRemoved")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("LastModifiedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("LastModifiedTime")
                      .HasColumnType("timestamp with time zone");

            b.Property<int?>("ParentPostCommentId")
                      .HasColumnType("integer");

            b.Property<int>("PostId")
                      .HasColumnType("integer");

            b.Property<string>("RemovedBy")
                      .HasColumnType("text");

            b.HasKey("Id");

            b.HasIndex("DateRemoved");

            b.HasIndex("LastModifiedTime");

            b.HasIndex("ParentPostCommentId");

            b.HasIndex("PostId");

            b.ToTable("PostComments");
          });

      modelBuilder.Entity("DmcSocial.Models.PostTag", b =>
          {
            b.Property<int>("PostId")
                      .HasColumnType("integer");

            b.Property<string>("TagId")
                      .HasColumnType("text");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("DateCreated")
                      .HasColumnType("timestamp with time zone");

            b.Property<DateTimeOffset?>("DateRemoved")
                      .HasColumnType("timestamp with time zone");

            b.Property<int>("Id")
                      .HasColumnType("integer");

            b.Property<string>("LastModifiedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("LastModifiedTime")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("RemovedBy")
                      .HasColumnType("text");

            b.HasKey("PostId", "TagId");

            b.HasIndex("DateRemoved");

            b.HasIndex("LastModifiedTime");

            b.HasIndex("TagId");

            b.ToTable("PostTags");
          });

      modelBuilder.Entity("DmcSocial.Models.Tag", b =>
          {
            b.Property<string>("NormalizeValue")
                      .HasColumnType("text");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("DateCreated")
                      .HasColumnType("timestamp with time zone");

            b.Property<DateTimeOffset?>("DateRemoved")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("LastModifiedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("LastModifiedTime")
                      .HasColumnType("timestamp with time zone");

            b.Property<int>("PostCount")
                      .HasColumnType("integer");

            b.Property<string>("Reference")
                      .HasColumnType("text");

            b.Property<string>("RemovedBy")
                      .HasColumnType("text");

            b.Property<string>("Value")
                      .HasColumnType("text");

            b.HasKey("NormalizeValue");

            b.HasIndex("DateRemoved");

            b.HasIndex("LastModifiedTime");

            b.ToTable("Tags");
          });

      modelBuilder.Entity("DmcSocial.Models.WordFrequency", b =>
          {
            b.Property<string>("Word")
                      .HasColumnType("text");

            b.Property<int>("PostId")
                      .HasColumnType("integer");

            b.Property<string>("CreatedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("DateCreated")
                      .HasColumnType("timestamp with time zone");

            b.Property<DateTimeOffset?>("DateRemoved")
                      .HasColumnType("timestamp with time zone");

            b.Property<long>("Frequency")
                      .HasColumnType("bigint");

            b.Property<int>("Id")
                      .HasColumnType("integer");

            b.Property<string>("LastModifiedBy")
                      .HasColumnType("text");

            b.Property<DateTimeOffset>("LastModifiedTime")
                      .HasColumnType("timestamp with time zone");

            b.Property<string>("RemovedBy")
                      .HasColumnType("text");

            b.HasKey("Word", "PostId");

            b.ToTable("WordFrequencies");
          });

      modelBuilder.Entity("DmcSocial.Models.PostComment", b =>
          {
            b.HasOne("DmcSocial.Models.PostComment", "ParentPostComment")
                      .WithMany("ChildrenPostComments")
                      .HasForeignKey("ParentPostCommentId");

            b.HasOne("DmcSocial.Models.Post", "Post")
                      .WithMany("Comments")
                      .HasForeignKey("PostId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("DmcSocial.Models.PostTag", b =>
          {
            b.HasOne("DmcSocial.Models.Post", "Post")
                      .WithMany("PostTags")
                      .HasForeignKey("PostId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("DmcSocial.Models.Tag", "Tag")
                      .WithMany()
                      .HasForeignKey("TagId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });
#pragma warning restore 612, 618
    }
  }
}
